// –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞ ID
const $ = id => document.getElementById(id);

// –ë–∞–∑–æ–≤–∏–π URL –¥–ª—è API
const API = "http://localhost:5800/todo";
// –ß–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó –≤ –º—Å, –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ CSS
const ANIMATION_TIME = 500;


// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é.
function toggleModal(modalId, show) {
    const modal = $(modalId);
    if (!modal) return;

    if (show) {
        modal.style.display = 'block';
        // –ù–µ–≤–µ–ª–∏–∫–∏–π —Ç–∞–π–º–∞—É—Ç, —â–æ–± CSS –≤—Å—Ç–∏–≥ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ display: block –ø–µ—Ä–µ–¥ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
        setTimeout(() => modal.classList.add('active'), 10);
    } else {
        modal.classList.remove('active');
        // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó, –ø–µ—Ä—à –Ω—ñ–∂ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç
        setTimeout(() => {
            modal.style.display = 'none';
        }, ANIMATION_TIME);
    }
}

// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç –¥–æ AI –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.

async function sendToAI(text) {
    const btn = $("sendToAIBtn");
    const oldContent = btn.innerHTML;
    btn.disabled = true;
    btn.innerHTML = 'üîÑ';

    try {
        const res = await fetch(`${API}/ai-process`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(text)
        });
        if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ AI');
        await res.json(); // –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è
        loadTodoList();
    } catch (err) {
        alert(err.message);
    } finally {
        btn.innerHTML = oldContent;
        btn.disabled = false;
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
$("addButton").onclick = () => toggleModal("addItem", true);
$("closeWindowBtn").onclick = () => toggleModal("addItem", false);
$("searchBarBtn").onclick = () => toggleModal("record", true);
$("closeRecordBtn").onclick = () => toggleModal("record", false);

/* –ü—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è loadTodoList */
window.addEventListener('DOMContentLoaded', loadTodoList);

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ
$("submitButton").onclick = async e => {
    e.preventDefault();
    const title = $("task-name").value.trim();
    const description = $("task-description").value.trim();
    const completeTime = $("task-date").value;

    if (!title) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ.');
        return;
    }

    try {
        const res = await fetch(API, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ title, description, isCompleted: false, completeTime })
        });
        if (!res.ok) throw new Error(await res.text());
        
        // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É —ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ
        $("task-name").value = '';
        $("task-description").value = '';
        $("task-date").value = '';
        toggleModal("addItem", false);
        
        loadTodoList();
    } catch (err) {
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ: ' + err.message);
    }
};

// –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á
$("todoList").onclick = function(e) {
    if (e.target.classList.contains('close-btn')) {
        const taskDiv = e.target.closest('.task');
        const id = taskDiv.getAttribute('data-id');
        if (id) deleteTodoItem(id);
    }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –∑ —Å–µ—Ä–≤–µ—Ä–∞ —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ó—Ö –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
async function loadTodoList() {
    try {
        const res = await fetch(API);
        if (!res.ok) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–¥–∞—á—ñ');
        const data = await res.json();
        renderTodoList(data);
    } catch (err) {
        console.error("–ü–û–ú–ò–õ–ö–ê:", err);
        alert(err.message);
    }
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function formatDate(dateStr) {
    if (!dateStr) return '';
    const d = new Date(dateStr);
    if (isNaN(d.getTime())) return dateStr; // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏
    
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, '0');
    const dd = String(d.getDate()).padStart(2, '0');
    const hh = String(d.getHours()).padStart(2, '0');
    const min = String(d.getMinutes()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${min}`;
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
function renderTodoList(todos) {
    const todoList = $("todoList");
    todoList.innerHTML = '';
    todos.forEach((todo, i) => {
        // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–ª—ñ–≤, —â–æ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ —Ä—ñ–∑–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä
        const id = todo.Id || todo.id;
        const title = todo.Title || todo.title;
        const description = todo.Description || todo.description;
        const dateStr = formatDate(todo.CompleteTime || todo.completeTime);

        const div = document.createElement('div');
        div.className = 'task';
        div.setAttribute('data-id', id);
        div.innerHTML = `
            <div class="info">
                <h1>${title}</h1>
                <p>${description}</p>
            </div>
            <div class="date">${dateStr}</div>
            <button class="close-btn">‚úñ</button>
        `;
        todoList.appendChild(div);
        // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
        setTimeout(() => div.classList.add('task-in'), 30 + i * 60);
    });
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
function deleteTodoItem(id) {
    const taskDiv = document.querySelector(`.task[data-id="${id}"]`);
    if (taskDiv) {
        taskDiv.classList.remove('task-in');
        taskDiv.classList.add('task-out');
        // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
        setTimeout(() => {
            fetch(`${API}/${id}`, { method: 'DELETE' })
                .then(res => {
                    if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ');
                    loadTodoList();
                })
                .catch(err => alert(err.message));
        }, 400); // –ß–∞—Å –º–∞—î —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ CSS-–∞–Ω—ñ–º–∞—Ü—ñ—î—é
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç—É –¥–æ AI
$("sendToAIBtn").onclick = () => {
    const textInput = $("textToAI");
    const text = textInput.value.trim();
    if (text) {
        sendToAI(text);
        textInput.value = '';
    } else {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è AI');
    }
};

// --- –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ ---
if (window.hasOwnProperty('webkitSpeechRecognition')) {
    const recordBtn = $('recordBtn');
    let recognition = null;
    let isRecording = false;

    recordBtn.onclick = () => {
        if (isRecording) {
            recognition.stop();
            return;
        }
        
        recognition = new webkitSpeechRecognition();
        recognition.lang = 'uk-UA';
        recognition.interimResults = false;
        recognition.maxAlternatives = 1;

        recognition.onstart = () => {
            isRecording = true;
            recordBtn.innerHTML = '‚èπÔ∏è';
        };

        recognition.onresult = (event) => {
            toggleModal('record', false);
            const text = event.results[0][0].transcript;
            console.log('–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:', text);
            sendToAI(text);
        };

        recognition.onerror = (event) => {
            alert('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: ' + event.error);
        };

        recognition.onend = () => {
            isRecording = false;
            recordBtn.innerHTML = 'üé§';
        };

        recognition.start();
    };
} else {
    // –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, —Ö–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫—É
    console.log('–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.');
    if ($('searchBarBtn')) $('searchBarBtn').style.display = 'none';
}